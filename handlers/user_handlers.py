from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
import sys
import os
import logging
import aiosqlite
from datetime import datetime, timedelta
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from states import AppointmentStates
from keyboards.inline_keyboards import get_service_keyboard, send_services_with_photos, get_date_keyboard, get_time_keyboard, \
    get_confirmation_keyboard, get_allergies_keyboard
from services.database import db
from services.validation import (
    validate_fio, validate_phone, validate_date, validate_time, 
    validate_service, sanitize_input, validate_callback_data, ValidationError
)
from services.rate_limiter import rate_limiter
from aiogram.utils.formatting import Bold, Text

logger = logging.getLogger(__name__)

router = Router()

@router.message(F.text == "/start")
async def start(message: Message, state: FSMContext):
    if not message.from_user:
        return
    
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç —Å–ø–∞–º–∞
    if rate_limiter.is_rate_limited(user_id):
        await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if rate_limiter.is_user_blocked(user_id):
        await message.answer("–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    try:
        await state.clear()
        rate_limiter.set_user_state(user_id, "SELECT_SERVICE")
        await send_services_with_photos(
            message.bot, 
            message.chat.id, 
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:"
        )
        await state.set_state(AppointmentStates.SELECT_SERVICE)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(F.text == "/help")
async def help_command(message: Message):
    if not message.from_user:
        return
    
    help_text = """
üåü <b>–ö–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É?</b>

üìã <b>–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>

1Ô∏è‚É£ <b>–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É</b>
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ /start –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞
   ‚Ä¢ –£–≤–∏–¥–∏—Ç–µ —Ü–µ–Ω—ã –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä

2Ô∏è‚É£ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É</b>
   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
   ‚Ä¢ –î–∞—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Å –¥–Ω—è–º–∏ –Ω–µ–¥–µ–ª–∏

3Ô∏è‚É£ <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è</b>
   ‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
   ‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 8:00 - 20:00

4Ô∏è‚É£ <b>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ</b>
   ‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–ò–û)
   ‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–ª–∏—á–∏–µ –∞–ª–ª–µ—Ä–≥–∏–π
   ‚Ä¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞

5Ô∏è‚É£ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å</b>
   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å"

üì± <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ —É—Å–ª—É–≥—É
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/my_bookings - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏
/cancel_booking - –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 3 –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
‚Ä¢ –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –≤–æ–∑–º–æ–∂–Ω–∞ –Ω–µ –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 2 —á–∞—Å–∞ –¥–æ –ø—Ä–∏–µ–º–∞
‚Ä¢ –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel_booking –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏

üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """
    
    await message.answer(help_text, parse_mode="HTML")

@router.message(F.text == "/my_bookings")
async def my_bookings(message: Message):
    if not message.from_user:
        return
    
    user_id = message.from_user.id
    
    try:
        appointments = await db.get_all_appointments()
        user_appointments = [apt for apt in appointments if apt[1] == user_id]
        
        if not user_appointments:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.\n\n–ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É!")
            return
        
        bookings_text = "<b>–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:</b>\n\n"
        
        for i, apt in enumerate(user_appointments, 1):
            bookings_text += f"{i}. <b>{apt[2]}</b>\n"
            bookings_text += f"   –î–∞—Ç–∞: {apt[3]} –≤ {apt[4]}\n"
            bookings_text += f"   –ö–ª–∏–µ–Ω—Ç: {apt[5]}\n"
            bookings_text += f"   –¢–µ–ª–µ—Ñ–æ–Ω: {apt[7]}\n"
            bookings_text += f"   –ê–ª–ª–µ—Ä–≥–∏–∏: {apt[6]}\n\n"
        
        await message.answer(bookings_text, parse_mode="HTML")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π.")

@router.message(F.text == "/cancel_booking")
async def cancel_booking_start(message: Message, state: FSMContext):
    if not message.from_user:
        return
    
    user_id = message.from_user.id
    
    try:
        appointments = await db.get_all_appointments()
        user_appointments = [apt for apt in appointments if apt[1] == user_id]
        
        if not user_appointments:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 2 —á–∞—Å–∞
        now = datetime.now()
        cancellable_appointments = []
        
        for apt in user_appointments:
            try:
                apt_datetime = datetime.strptime(f"{apt[3]} {apt[4]}", "%d.%m.%Y %H:%M")
                if apt_datetime > now + timedelta(hours=2):
                    cancellable_appointments.append(apt)
            except:
                continue
        
        if not cancellable_appointments:
            await message.answer("–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –≤–æ–∑–º–æ–∂–Ω–∞ –Ω–µ –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 2 —á–∞—Å–∞ –¥–æ –ø—Ä–∏–µ–º–∞.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        
        buttons = []
        for apt in cancellable_appointments:
            button_text = f"{apt[2]} - {apt[3]} {apt[4]}"
            buttons.append([InlineKeyboardButton(
                text=button_text,
                callback_data=f"cancel_apt_{apt[0]}"
            )])
        
        buttons.append([InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_cancel")])
        
        await message.answer(
            "<b>–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–º–µ–Ω—ã:</b>\n\n"
            "–û—Ç–º–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–∞ –Ω–µ –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 2 —á–∞—Å–∞ –¥–æ –ø—Ä–∏–µ–º–∞",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏.")

@router.callback_query(F.data.startswith("cancel_apt_"))
async def cancel_booking_confirm(callback: CallbackQuery, state: FSMContext):
    if callback.message is None or callback.data is None:
        return
    
    try:
        apt_id = int(callback.data.replace("cancel_apt_", ""))
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å
        appointments = await db.get_all_appointments()
        appointment = next((apt for apt in appointments if apt[0] == apt_id), None)
        
        if not appointment:
            await callback.message.answer("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if appointment[1] != callback.from_user.id:
            await callback.message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —á—É–∂—É—é –∑–∞–ø–∏—Å—å.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è (–Ω–µ –º–µ–Ω–µ–µ 2 —á–∞—Å–æ–≤)
        now = datetime.now()
        apt_datetime = datetime.strptime(f"{appointment[3]} {appointment[4]}", "%d.%m.%Y %H:%M")
        
        if apt_datetime <= now + timedelta(hours=2):
            await callback.message.answer("‚ö†Ô∏è –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –≤–æ–∑–º–æ–∂–Ω–∞ –Ω–µ –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 2 —á–∞—Å–∞ –¥–æ –ø—Ä–∏–µ–º–∞.")
            return
        
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–∏—Å—å
        await db.delete_appointment(apt_id)
        
        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–ª–æ—Ç
        await db.mark_slot_as_available(appointment[3], appointment[4], appointment[2])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ–± –æ—Ç–º–µ–Ω–µ
        try:
            from config import ADMIN_ID
            if callback.message and callback.message.bot:
                cancel_notification = (
                    f"‚ùå <b>–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–æ–º!</b>\n\n"
                    f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {appointment[5]}\n"
                    f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {appointment[7]}\n"
                    f"üíÜ‚Äç‚ôÄÔ∏è <b>–£—Å–ª—É–≥–∞:</b> {appointment[2]}\n"
                    f"üìÖ <b>–î–∞—Ç–∞:</b> {appointment[3]}\n"
                    f"‚è∞ <b>–í—Ä–µ–º—è:</b> {appointment[4]}\n"
                    f"üÜî <b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {appointment[1]}\n\n"
                    f"‚úÖ –°–ª–æ—Ç –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"
                )
                
                await callback.message.bot.send_message(
                    chat_id=ADMIN_ID,
                    text=cancel_notification,
                    parse_mode="HTML"
                )
                logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {appointment[1]}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –æ–± –æ—Ç–º–µ–Ω–µ: {e}")
        
        await callback.message.answer(
            f"<b>–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞!</b>\n\n"
            f"{appointment[2]}\n"
            f"{appointment[3]} –≤ {appointment[4]}\n\n"
            f"–°–ª–æ—Ç –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ—Ç–º–µ–Ω—ã: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏.")

@router.callback_query(F.data == "cancel_cancel")
async def cancel_cancel_booking(callback: CallbackQuery, state: FSMContext):
    if callback.message is None:
        return
    
    await callback.message.answer("–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –ø—Ä–µ—Ä–≤–∞–Ω–∞.")

@router.callback_query(F.data.startswith("service_"))
async def select_service(callback: CallbackQuery, state: FSMContext):
    if callback.data is None or callback.message is None or not callback.from_user:
        return
    user_id = callback.from_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç —Å–ø–∞–º–∞
    if rate_limiter.is_rate_limited(user_id):
        await callback.message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    try:
        service_parts = validate_callback_data(callback.data, "service_")
        if not service_parts:
            await callback.message.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        service = await validate_service(service_parts[0])
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Å–ª—É–≥–∞ —Ä–µ–∞–ª—å–Ω–æ –µ—Å—Ç—å –≤ –±–∞–∑–µ
        from services.database import db
        all_services = await db.get_all_services()
        if not any(s[1] == service for s in all_services):
            logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —É—Å–ª—É–≥—É: {service}")
            await state.clear()
            await callback.message.answer("–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
            return
        await state.update_data(service=service)
        rate_limiter.set_user_state(user_id, "ENTER_DATE")
        dates = await db.get_available_dates(service)
        await callback.message.answer(
            f"üìÖ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –¥–ª—è —É—Å–ª—É–≥–∏ ¬´{service}¬ª:",
            reply_markup=get_date_keyboard(service, dates)
        )
        await state.set_state(AppointmentStates.ENTER_DATE)
    except ValidationError as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ select_service: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data.startswith("date_"), AppointmentStates.ENTER_DATE)
async def select_date(callback: CallbackQuery, state: FSMContext):
    if callback.data is None or callback.message is None:
        return
        
    try:
        parts = callback.data.split("_")
        if len(parts) >= 3:
            date = parts[1]
            service = parts[2]
            await state.update_data(date=date, service=service)
            times = await db.get_available_times(date, service)
            await callback.message.answer(
                f"‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ {date}:",
                reply_markup=get_time_keyboard(date, service, times)
            )
            await state.set_state(AppointmentStates.ENTER_TIME)
        else:
            await callback.message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@router.callback_query(F.data.startswith("time_"), AppointmentStates.ENTER_TIME)
async def select_time(callback: CallbackQuery, state: FSMContext):
    if callback.data is None or callback.message is None:
        return
        
    try:
        parts = callback.data.split("_")
        if len(parts) >= 4:
            time = parts[1]
            date = parts[2]
            service = parts[3]
            await state.update_data(time=time, date=date, service=service)
            await callback.message.answer(
                "üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–§–ò–û):"
            )
            await state.set_state(AppointmentStates.ENTER_FIO)
        else:
            await callback.message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@router.message(AppointmentStates.ENTER_FIO)
async def process_fio(message: Message, state: FSMContext):
    if message.text is None or not message.from_user:
        return
    
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç —Å–ø–∞–º–∞
    if rate_limiter.is_rate_limited(user_id):
        await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    try:
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –§–ò–û
        fio = validate_fio(sanitize_input(message.text))
        await state.update_data(fio=fio)
        rate_limiter.set_user_state(user_id, "ALLERGIES")
        await message.answer(
            "‚ö†Ô∏è –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∞–ª–ª–µ—Ä–≥–∏–∏ –Ω–∞ –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞?",
            reply_markup=get_allergies_keyboard()
        )
        await state.set_state(AppointmentStates.ALLERGIES)
    except ValidationError as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_fio: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data.startswith("allergy_"), AppointmentStates.ALLERGIES)
async def process_allergies(callback: CallbackQuery, state: FSMContext):
    if callback.data is None or callback.message is None:
        return
        
    allergies = "–î–∞" if callback.data == "allergy_yes" else "–ù–µ—Ç"
    await state.update_data(allergies=allergies)
    await callback.message.answer(
        "üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:"
    )
    await state.set_state(AppointmentStates.PHONE)

@router.message(AppointmentStates.PHONE)
async def process_phone(message: Message, state: FSMContext):
    if message.text is None or not message.from_user:
        return
    
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç —Å–ø–∞–º–∞
    if rate_limiter.is_rate_limited(user_id):
        await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    try:
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
        phone = validate_phone(sanitize_input(message.text))
        await state.update_data(phone=phone)
        rate_limiter.set_user_state(user_id, "CONFIRM")
        await message.answer(
            "üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å:",
            reply_markup=get_confirmation_keyboard()
        )
        await state.set_state(AppointmentStates.CONFIRM)
    except ValidationError as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_phone: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data == "confirm_booking", AppointmentStates.CONFIRM)
async def confirm_booking(callback: CallbackQuery, state: FSMContext):
    if callback.message is None or not callback.from_user:
        return
    
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç —Å–ø–∞–º–∞
    if rate_limiter.is_rate_limited(user_id):
        await callback.message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    try:
        data = await state.get_data()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
        required_fields = ["service", "date", "time", "fio", "allergies", "phone"]
        for field in required_fields:
            if field not in data or not data[field]:
                await callback.message.answer("–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å –∑–∞–Ω–æ–≤–æ.")
                await state.clear()
                rate_limiter.clear_user_state(user_id)
                return
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        service = await validate_service(data["service"])
        date = validate_date(data["date"])
        time = validate_time(data["time"])
        fio = validate_fio(data["fio"])
        phone = validate_phone(data["phone"])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π
        user_appointments = await db.get_all_appointments()
        user_count = sum(1 for appt in user_appointments if appt[1] == user_id)
        if user_count >= 3:
            logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π")
            await callback.message.answer("–£ –≤–∞—Å —É–∂–µ 3 –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏. –ù–µ–ª—å–∑—è –±–æ–ª—å—à–µ.")
            return

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
        await db.add_appointment(
            user_id=user_id,
            service=service,
            date=date,
            time=time,
            fio=fio,
            allergies=data["allergies"],
            phone=phone
        )
        
        # –ü–æ–º–µ—á–∞–µ–º —Å–ª–æ—Ç –∫–∞–∫ –∑–∞–Ω—è—Ç—ã–π
        await db.mark_slot_as_booked(date, time, service)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        try:
            from config import ADMIN_ID
            if callback.message and callback.message.bot:
                admin_notification = (
                    f"üÜï <b>–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!</b>\n\n"
                    f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {fio}\n"
                    f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
                    f"‚ö†Ô∏è <b>–ê–ª–ª–µ—Ä–≥–∏–∏:</b> {data['allergies']}\n"
                    f"üíÜ‚Äç‚ôÄÔ∏è <b>–£—Å–ª—É–≥–∞:</b> {service}\n"
                    f"üìÖ <b>–î–∞—Ç–∞:</b> {date}\n"
                    f"‚è∞ <b>–í—Ä–µ–º—è:</b> {time}\n"
                    f"üÜî <b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {user_id}\n\n"
                    f"üìä <b>–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π —É –∫–ª–∏–µ–Ω—Ç–∞:</b> {user_count + 1}"
                )
                
                await callback.message.bot.send_message(
                    chat_id=ADMIN_ID,
                    text=admin_notification,
                    parse_mode="HTML"
                )
                logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
        
        await callback.message.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
            f"–î–∞—Ç–∞: {date}\n"
            f"–í—Ä–µ–º—è: {time}\n"
            f"–£—Å–ª—É–≥–∞: {service}\n\n"
            "–ñ–¥–µ–º –≤–∞—Å –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è!"
        )
        await state.clear()
        rate_limiter.clear_user_state(user_id)
        
    except ValidationError as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
    except ValueError as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ confirm_booking: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data == "cancel_booking", AppointmentStates.CONFIRM)
async def cancel_booking(callback: CallbackQuery, state: FSMContext):
    if callback.message is None:
        return
        
    await callback.message.answer("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥"
@router.callback_query(F.data == "back_to_service")
async def back_to_service(callback: CallbackQuery, state: FSMContext):
    if callback.message is None:
        return
    user_state = await state.get_state()
    if user_state != AppointmentStates.ENTER_DATE.state:
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id if callback.from_user else 'None'} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É—Å–ª—É–≥–∞–º –Ω–µ –∏–∑ –¥–∞—Ç—ã")
        await state.clear()
        await callback.message.answer("–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        return
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        reply_markup=await get_service_keyboard()
    )
    await state.set_state(AppointmentStates.SELECT_SERVICE)

@router.callback_query(F.data.startswith("back_to_date_"))
async def back_to_date(callback: CallbackQuery, state: FSMContext):
    if callback.message is None or callback.data is None:
        return
    
    service = callback.data.replace("back_to_date_", "")
    await state.update_data(service=service)
    dates = await db.get_available_dates(service)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=get_date_keyboard(service, dates))
    await state.set_state(AppointmentStates.ENTER_DATE)

@router.callback_query(F.data == "back_to_fio")
async def back_to_fio(callback: CallbackQuery, state: FSMContext):
    if callback.message is None:
        return
    
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")
    await state.set_state(AppointmentStates.ENTER_FIO)

@router.callback_query(F.data == "back_to_phone")
async def back_to_phone(callback: CallbackQuery, state: FSMContext):
    if callback.message is None:
        return
    
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(AppointmentStates.PHONE)

