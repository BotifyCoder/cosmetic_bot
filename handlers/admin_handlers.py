from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
import sys
import os
import logging
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from states import AdminStates
from keyboards.inline_keyboards import get_admin_appointment_keyboard, get_admin_services_keyboard, get_service_edit_keyboard, get_admin_main_keyboard
from services.database import db
from services.rate_limiter import rate_limiter
from config import ADMIN_ID
from datetime import datetime

logger = logging.getLogger(__name__)

router = Router()


@router.message(F.text == "/admin")
async def admin(message: Message, state: FSMContext):
    if message.from_user is None or message.from_user.id != ADMIN_ID:
        return

    await message.answer(
        "üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_admin_main_keyboard()
    )


@router.callback_query(F.data == "add_slot")
async def add_slot(callback: CallbackQuery, state: FSMContext):
    if callback.message is None:
        return
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –≤—Ä–µ–º—è –∏ —Ç–∏–ø —É—Å–ª—É–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):\n\n–ü—Ä–∏–º–µ—Ä: 15.06.2025,14:00,–ú–∞—Å—Å–∞–∂")
    await state.set_state(AdminStates.ADD_SLOT)


@router.message(AdminStates.ADD_SLOT)
async def process_add_slot(message: Message, state: FSMContext):
    if message.text is None:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.")
        return
        
    try:
        date, time, service = message.text.split(",")
        date = date.strip()
        time = time.strip()
        service = service.strip()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å–ª—É–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        from services.database import db
        all_services = await db.get_all_services()
        service_names = [s[1].lower() for s in all_services]
        
        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é —É—Å–ª—É–≥—É (—á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
        matched_service = None
        for s in all_services:
            if service.lower() in s[1].lower() or s[1].lower() in service.lower():
                matched_service = s[1]
                break
        
        if not matched_service:
            available_services = ", ".join([s[1] for s in all_services])
            await message.answer(f"–£—Å–ª—É–≥–∞ '{service}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏: {available_services}")
            return
        
        await db.add_slot(date, time, matched_service)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞
        try:
            if message.bot:
                slot_notification = (
                    f"‚ûï <b>–ù–æ–≤—ã–π —Å–ª–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                    f"üíÜ‚Äç‚ôÄÔ∏è <b>–£—Å–ª—É–≥–∞:</b> {matched_service}\n"
                    f"üìÖ <b>–î–∞—Ç–∞:</b> {date}\n"
                    f"‚è∞ <b>–í—Ä–µ–º—è:</b> {time}\n"
                    f"üë§ <b>–î–æ–±–∞–≤–∏–ª:</b> –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
                )
                
                await message.bot.send_message(
                    chat_id=ADMIN_ID,
                    text=slot_notification,
                    parse_mode="HTML"
                )
                logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞ {date} {time} - {matched_service}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –æ —Å–ª–æ—Ç–µ: {e}")
        
        await message.answer(f"‚úÖ –°–ª–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {date} {time} - {matched_service}")
        await state.clear()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞: {e}")
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –¥–∞—Ç–∞,–≤—Ä–µ–º—è,–Ω–∞–∑–≤–∞–Ω–∏–µ_—É—Å–ª—É–≥–∏")

@router.callback_query(F.data == "admin_exit")
async def admin_exit(callback: CallbackQuery, state: FSMContext):
    if callback.message is None:
        return
    
    await callback.message.answer("–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞.")
    await state.clear()




@router.callback_query(F.data == "delete_slot")
async def delete_slot(callback: CallbackQuery, state: FSMContext):
    if callback.message is None or callback.from_user is None or callback.from_user.id != ADMIN_ID:
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ delete_slot: {getattr(callback.from_user, 'id', None)}")
        if callback.message:
            await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
        
    slots = await db.get_all_slots()
    if not slots:
        await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")
        return

    buttons = []
    for slot in slots:
        buttons.append([
            InlineKeyboardButton(
                text=f"{slot[1]} {slot[2]} ({slot[3]})",
                callback_data=f"delete_{slot[0]}"
            )
        ])

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))
    await state.set_state(AdminStates.DELETE_SLOT)


@router.callback_query(F.data.startswith("delete_"), AdminStates.DELETE_SLOT)
async def confirm_delete(callback: CallbackQuery, state: FSMContext):
    if callback.data is None or callback.message is None:
        return
        
    slot_id = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ—Ç–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    slots = await db.get_all_slots()
    slot_to_delete = next((slot for slot in slots if slot[0] == slot_id), None)
    
    await db.delete_slot(slot_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞
    if slot_to_delete and callback.message and callback.message.bot:
        try:
            slot_notification = (
                f"‚ûñ <b>–°–ª–æ—Ç —É–¥–∞–ª–µ–Ω!</b>\n\n"
                f"üíÜ‚Äç‚ôÄÔ∏è <b>–£—Å–ª—É–≥–∞:</b> {slot_to_delete[3]}\n"
                f"üìÖ <b>–î–∞—Ç–∞:</b> {slot_to_delete[1]}\n"
                f"‚è∞ <b>–í—Ä–µ–º—è:</b> {slot_to_delete[2]}\n"
                f"üë§ <b>–£–¥–∞–ª–∏–ª:</b> –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
            )
            
            await callback.message.bot.send_message(
                chat_id=ADMIN_ID,
                text=slot_notification,
                parse_mode="HTML"
            )
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞ {slot_to_delete[1]} {slot_to_delete[2]} - {slot_to_delete[3]}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞: {e}")
    
    await callback.message.answer("–°–ª–æ—Ç —É–¥–∞–ª–µ–Ω!")
    await state.clear()


@router.callback_query(F.data == "view_appointments")
async def view_appointments(callback: CallbackQuery, state: FSMContext):
    if callback.message is None:
        return
        
    appointments = await db.get_all_appointments()

    if not appointments:
        await callback.message.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π")
        return

    for appt in appointments:
        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–Ω–¥–µ–∫—Å—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ë–î
        message_text = (
            f"üë§ –§–ò–û: {appt[5] if appt[5] else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {appt[7] if appt[7] else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"‚ö†Ô∏è –ê–ª–ª–µ—Ä–≥–∏–∏: {appt[6] if appt[6] in ['–î–∞', '–ù–µ—Ç'] else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üíÜ‚Äç‚ôÇÔ∏è –£—Å–ª—É–≥–∞: {appt[2]}\n"
            f"üìÖ –î–∞—Ç–∞: {appt[3]}\n"
            f"‚è∞ –í—Ä–µ–º—è: {appt[4]}\n"
        )

        action_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_appt_{appt[0]}")],
                [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏", callback_data=f"move_appt_{appt[0]}")]
            ]
        )

        await callback.message.answer(message_text, reply_markup=action_keyboard)

    await callback.message.answer("–í—Å–µ –∑–∞–ø–∏—Å–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤—ã—à–µ.")


@router.callback_query(F.data.startswith("delete_appt_"))
async def handle_delete_appt(callback: CallbackQuery):
    if callback.message is None or callback.from_user is None or callback.from_user.id != ADMIN_ID or callback.data is None:
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ delete_appt: {getattr(callback.from_user, 'id', None)}")
        if callback.message:
            await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    appt_id = int(callback.data.replace("delete_appt_", ""))
    appointments = await db.get_all_appointments()
    appt = next((a for a in appointments if a[0] == appt_id), None)
    if not appt:
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å: {appt_id}")
        await callback.message.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    await db.delete_appointment(appt_id)
    await callback.message.answer("‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞")

@router.callback_query(F.data.startswith("move_appt_"))
async def move_appointment_start(callback: CallbackQuery, state: FSMContext):
    if callback.message is None or callback.from_user is None or callback.from_user.id != ADMIN_ID or callback.data is None:
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ move_appt: {getattr(callback.from_user, 'id', None)}")
        if callback.message:
            await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    appt_id = int(callback.data.replace("move_appt_", ""))
    appointments = await db.get_all_appointments()
    appt = next((a for a in appointments if a[0] == appt_id), None)
    if not appt:
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å: {appt_id}")
        await callback.message.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    await state.update_data(move_appt_id=appt_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ (–ø—Ä–∏–º–µ—Ä: 16.06.2025,15:00):")
    await state.set_state(AdminStates.MOVE_APPOINTMENT)

@router.message(AdminStates.MOVE_APPOINTMENT)
async def move_appointment_process(message: Message, state: FSMContext):
    if message.text is None or message.from_user is None or message.from_user.id != ADMIN_ID:
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –∑–∞–ø–∏—Å–∏ –Ω–µ–∞–¥–º–∏–Ω–æ–º: {getattr(message.from_user, 'id', None)}")
        if message.from_user:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
        
    try:
        date, time = message.text.split(",")
        data = await state.get_data()
        appt_id = data["move_appt_id"]
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å
        appointments = await db.get_all_appointments()
        appt = next((a for a in appointments if a[0] == appt_id), None)
        if not appt:
            await message.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await state.clear()
            return
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç
        slots = await db.get_all_slots()
        slot_exists = any(s[1] == date.strip() and s[2] == time.strip() and s[3] == appt[2] and not s[4] for s in slots)
        if not slot_exists:
            await message.answer("–ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è —ç—Ç–æ–π —É—Å–ª—É–≥–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.")
            return
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å (—É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é)
        await db.delete_appointment(appt_id)
        await db.add_appointment(
            user_id=appt[1],
            service=appt[2],
            date=date.strip(),
            time=time.strip(),
            fio=appt[5],
            allergies=appt[6],
            phone=appt[7]
        )
        await message.answer("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞!")
        await state.clear()
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞: {e}\n–§–æ—Ä–º–∞—Ç: –¥–∞—Ç–∞,–≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 16.06.2025,15:00)")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∞–º–∏
@router.callback_query(F.data == "manage_services")
async def manage_services(callback: CallbackQuery, state: FSMContext):
    if callback.message is None:
        return
    
    await callback.message.answer(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏:",
        reply_markup=await get_admin_services_keyboard()
    )

@router.callback_query(F.data == "add_service")
async def add_service_start(callback: CallbackQuery, state: FSMContext):
    if callback.message is None or callback.from_user is None or callback.from_user.id != ADMIN_ID:
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ: {getattr(callback.from_user, 'id', None)}")
        if callback.message:
            await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å(–º–∏–Ω), —Ü–µ–Ω–∞\n\n"
        "–ü—Ä–∏–º–µ—Ä: –ú–∞–Ω–∏–∫—é—Ä, –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –º–∞–Ω–∏–∫—é—Ä, 60, 1500"
    )
    await state.set_state(AdminStates.ADD_SERVICE)

@router.message(AdminStates.ADD_SERVICE)
async def add_service_process(message: Message, state: FSMContext):
    if message.text is None or message.from_user is None or message.from_user.id != ADMIN_ID:
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É –Ω–µ–∞–¥–º–∏–Ω–æ–º: {getattr(message.from_user, 'id', None)}")
        if message.from_user:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    try:
        parts = message.text.split(",")
        if len(parts) >= 4:
            name = parts[0].strip()
            description = parts[1].strip()
            duration = int(parts[2].strip())
            price = float(parts[3].strip())
            
            if rate_limiter.is_rate_limited(message.from_user.id):
                await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return

            success = await db.add_service(name, description, duration, price)
            if success:
                await message.answer("‚úÖ –£—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏.")
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —Ü–µ–Ω–∞")
    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–µ–ª.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏.")
    
    await state.clear()

@router.callback_query(F.data.startswith("edit_service_"))
async def edit_service_start(callback: CallbackQuery, state: FSMContext):
    if callback.message is None or callback.from_user is None or callback.from_user.id != ADMIN_ID or callback.data is None:
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ edit_service: {getattr(callback.from_user, 'id', None)}")
        if callback.message:
            await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    service_id = int(callback.data.replace("edit_service_", ""))
    service = await db.get_service_by_id(service_id)
    
    if not service:
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —É—Å–ª—É–≥—É: {service_id}")
        await callback.message.answer("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if service[5] else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
    message_text = (
        f"üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:\n\n"
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {service[1]}\n"
        f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {service[2]}\n"
        f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {service[3]} –º–∏–Ω\n"
        f"üí∞ –¶–µ–Ω–∞: {service[4]}‚ÇΩ\n"
        f"üìä –°—Ç–∞—Ç—É—Å: {status}"
    )
    
    await callback.message.answer(
        message_text,
        reply_markup=get_service_edit_keyboard(service_id)
    )

@router.callback_query(F.data.startswith("delete_service_"))
async def delete_service_confirm(callback: CallbackQuery, state: FSMContext):
    if callback.message is None or callback.from_user is None or callback.from_user.id != ADMIN_ID or callback.data is None:
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ delete_service: {getattr(callback.from_user, 'id', None)}")
        if callback.message:
            await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    service_id = int(callback.data.replace("delete_service_", ""))
    service = await db.get_service_by_id(service_id)
    
    if not service:
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —É—Å–ª—É–≥—É: {service_id}")
        await callback.message.answer("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    success = await db.delete_service(service_id)
    if success:
        await callback.message.answer(f"‚úÖ –£—Å–ª—É–≥–∞ '{service[1]}' —É–¥–∞–ª–µ–Ω–∞ (–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞).")
    else:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏.")

@router.callback_query(F.data.startswith("edit_name_"))
async def edit_service_name_start(callback: CallbackQuery, state: FSMContext):
    if callback.message is None or callback.from_user is None or callback.from_user.id != ADMIN_ID or callback.data is None:
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ edit_name: {getattr(callback.from_user, 'id', None)}")
        if callback.message:
            await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    service_id = int(callback.data.replace("edit_name_", ""))
    service = await db.get_service_by_id(service_id)
    
    if not service:
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —É—Å–ª—É–≥–∏: {service_id}")
        await callback.message.answer("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    await state.update_data(edit_service_id=service_id, edit_field="name")
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:")
    await state.set_state(AdminStates.EDIT_SERVICE)

@router.callback_query(F.data.startswith("edit_desc_"))
async def edit_service_desc_start(callback: CallbackQuery, state: FSMContext):
    if callback.message is None or callback.from_user is None or callback.from_user.id != ADMIN_ID or callback.data is None:
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ edit_desc: {getattr(callback.from_user, 'id', None)}")
        if callback.message:
            await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    service_id = int(callback.data.replace("edit_desc_", ""))
    service = await db.get_service_by_id(service_id)
    
    if not service:
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —É—Å–ª—É–≥–∏: {service_id}")
        await callback.message.answer("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    await state.update_data(edit_service_id=service_id, edit_field="description")
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:")
    await state.set_state(AdminStates.EDIT_SERVICE)

@router.callback_query(F.data.startswith("edit_duration_"))
async def edit_service_duration_start(callback: CallbackQuery, state: FSMContext):
    if callback.message is None or callback.from_user is None or callback.from_user.id != ADMIN_ID or callback.data is None:
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ edit_duration: {getattr(callback.from_user, 'id', None)}")
        if callback.message:
            await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    service_id = int(callback.data.replace("edit_duration_", ""))
    service = await db.get_service_by_id(service_id)
    
    if not service:
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —É—Å–ª—É–≥–∏: {service_id}")
        await callback.message.answer("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    await state.update_data(edit_service_id=service_id, edit_field="duration")
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö):")
    await state.set_state(AdminStates.EDIT_SERVICE)

@router.callback_query(F.data.startswith("edit_price_"))
async def edit_service_price_start(callback: CallbackQuery, state: FSMContext):
    if callback.message is None or callback.from_user is None or callback.from_user.id != ADMIN_ID or callback.data is None:
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ edit_price: {getattr(callback.from_user, 'id', None)}")
        if callback.message:
            await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    service_id = int(callback.data.replace("edit_price_", ""))
    service = await db.get_service_by_id(service_id)
    
    if not service:
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —É—Å–ª—É–≥–∏: {service_id}")
        await callback.message.answer("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    await state.update_data(edit_service_id=service_id, edit_field="price")
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —É—Å–ª—É–≥–∏:")

@router.callback_query(F.data.startswith("toggle_active_"))
async def toggle_service_active(callback: CallbackQuery, state: FSMContext):
    if callback.message is None or callback.from_user is None or callback.from_user.id != ADMIN_ID or callback.data is None:
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ toggle_active: {getattr(callback.from_user, 'id', None)}")
        if callback.message:
            await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    service_id = int(callback.data.replace("toggle_active_", ""))
    service = await db.get_service_by_id(service_id)
    
    if not service:
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —É—Å–ª—É–≥–∏: {service_id}")
        await callback.message.answer("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    new_status = not service[5]  # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    success = await db.update_service(service_id, is_active=new_status)
    
    if success:
        status_text = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞" if new_status else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"
        await callback.message.answer(f"‚úÖ –£—Å–ª—É–≥–∞ '{service[1]}' {status_text}.")
    else:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —É—Å–ª—É–≥–∏.")

@router.callback_query(F.data.startswith("edit_photo_"))
async def edit_service_photo_start(callback: CallbackQuery, state: FSMContext):
    if callback.message is None or callback.from_user is None or callback.from_user.id != ADMIN_ID or callback.data is None:
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ edit_photo: {getattr(callback.from_user, 'id', None)}")
        if callback.message:
            await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    try:
        service_id = int(callback.data.replace("edit_photo_", ""))
        service = await db.get_service_by_id(service_id)
        
        if not service:
            await callback.message.answer("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        await state.update_data(editing_service_id=service_id)
        await callback.message.answer(
            f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è —É—Å–ª—É–≥–∏ '{service[1]}'\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, GIF\n"
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10 –ú–ë\n\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '—É–¥–∞–ª–∏—Ç—å' —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é."
        )
        await state.set_state(AdminStates.EDIT_PHOTO)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

@router.message(AdminStates.EDIT_PHOTO, F.photo)
async def edit_service_photo_process(message: Message, state: FSMContext):
    if not message.photo:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
        return
    
    try:
        data = await state.get_data()
        service_id = data.get('editing_service_id')
        
        if not service_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID —É—Å–ª—É–≥–∏.")
            await state.clear()
            return
        
        service = await db.get_service_by_id(service_id)
        if not service:
            await message.answer("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        if not message.bot:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            await state.clear()
            return
            
        file = await message.bot.get_file(photo.file_id)
        
        if not file or not file.file_path:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞.")
            await state.clear()
            return
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        file_extension = file.file_path.split('.')[-1] if '.' in file.file_path else 'jpg'
        filename = f"images/service_{service_id}.{file_extension}"
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        await message.bot.download_file(file.file_path, filename)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        success = await db.update_service(service_id, photo_path=filename)
        
        if success:
            await message.answer(
                f"‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è —É—Å–ª—É–≥–∏ '{service[1]}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
                f"üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.")
        await state.clear()

@router.message(AdminStates.EDIT_PHOTO, F.text)
async def edit_service_photo_text(message: Message, state: FSMContext):
    if message.text and message.text.lower() == '—É–¥–∞–ª–∏—Ç—å':
        try:
            data = await state.get_data()
            service_id = data.get('editing_service_id')
            
            if not service_id:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID —É—Å–ª—É–≥–∏.")
                await state.clear()
                return
            
            service = await db.get_service_by_id(service_id)
            if not service:
                await message.answer("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                await state.clear()
                return
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if service[5] and os.path.exists(service[5]):  # photo_path
                try:
                    os.remove(service[5])
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {service[5]}: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            success = await db.update_service(service_id, photo_path=None)
            
            if success:
                await message.answer(f"‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è —É—Å–ª—É–≥–∏ '{service[1]}' —É–¥–∞–ª–µ–Ω–∞.")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
            
            await state.clear()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.")
            await state.clear()
    else:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '—É–¥–∞–ª–∏—Ç—å' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.")

@router.message(AdminStates.EDIT_SERVICE)
async def edit_service_process(message: Message, state: FSMContext):
    if message.text is None:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç.")
        return
    
    try:
        data = await state.get_data()
        service_id = data.get("edit_service_id")
        edit_field = data.get("edit_field")
        
        if not service_id or not edit_field:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            await state.clear()
            return
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        update_params = {}
        
        if edit_field == "name":
            update_params["name"] = message.text.strip()
        elif edit_field == "description":
            update_params["description"] = message.text.strip()
        elif edit_field == "duration":
            update_params["duration"] = int(message.text.strip())
        elif edit_field == "price":
            update_params["price"] = float(message.text.strip())
        
        success = await db.update_service(service_id, **update_params)
        
        if success:
            await message.answer("‚úÖ –£—Å–ª—É–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏.")
            
    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏.")
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
@router.callback_query(F.data == "back_to_admin")
async def back_to_admin(callback: CallbackQuery, state: FSMContext):
    if callback.message is None:
        return
    
    await callback.message.answer(
        "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=get_admin_main_keyboard()
    )

@router.callback_query(F.data == "back_to_services")
async def back_to_services(callback: CallbackQuery, state: FSMContext):
    if callback.message is None:
        return
    
    await callback.message.answer(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏:",
        reply_markup=await get_admin_services_keyboard()
    )

@router.callback_query(F.data == "manage_appointments")
async def manage_appointments(callback: CallbackQuery, state: FSMContext):
    if callback.message is None:
        return
    
    await callback.message.answer(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç", callback_data="add_slot")],
                [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–ª–æ—Ç", callback_data="delete_slot")],
                [InlineKeyboardButton(text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π", callback_data="view_appointments")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
            ]
        )
    )
