#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

import asyncio
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from services.database import db
from datetime import datetime, timedelta

async def test_notifications():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
        appointments = await db.get_all_appointments()
        print(f"üìã –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ: {len(appointments)}")
        
        if not appointments:
            print("‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        now = datetime.now()
        tomorrow = now + timedelta(days=1)
        one_hour_later = now + timedelta(hours=1)
        
        print(f"üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now.strftime('%d.%m.%Y %H:%M')}")
        print(f"üìÖ –ó–∞–≤—Ç—Ä–∞: {tomorrow.strftime('%d.%m.%Y')}")
        print(f"‚è∞ –ß–µ—Ä–µ–∑ —á–∞—Å: {one_hour_later.strftime('%H:%M')}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        tomorrow_appointments = await db.get_appointments_by_date(tomorrow.strftime("%d.%m.%Y"))
        print(f"üìÖ –ó–∞–ø–∏—Å–µ–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞: {len(tomorrow_appointments)}")
        
        for apt in tomorrow_appointments:
            print(f"  - {apt[2]} –≤ {apt[4]} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {apt[1]})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ —á–∞—Å
        hour_appointments = await db.get_appointments_by_time(one_hour_later.strftime("%H:%M"))
        print(f"‚è∞ –ó–∞–ø–∏—Å–µ–π —á–µ—Ä–µ–∑ —á–∞—Å: {len(hour_appointments)}")
        
        for apt in hour_appointments:
            print(f"  - {apt[2]} –≤ {apt[4]} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {apt[1]})")
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_notifications()) 