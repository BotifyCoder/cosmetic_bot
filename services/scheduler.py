from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram import Bot
from services.database import db
from datetime import datetime, timedelta
import logging


def start_scheduler(bot: Bot):
    scheduler = AsyncIOScheduler()

    async def send_reminders():
        try:
            now = datetime.now()
            tomorrow = now + timedelta(days=1)
            
            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ –¥–µ–Ω—å
            tomorrow_appointments = await db.get_appointments_by_date(tomorrow.strftime("%d.%m.%Y"))
            for appt in tomorrow_appointments:
                try:
                    reminder_text = (
                        f"üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏!</b>\n\n"
                        f"üìÖ –ó–∞–≤—Ç—Ä–∞ —É –≤–∞—Å –∑–∞–ø–∏—Å—å:\n"
                        f"üíÜ‚Äç‚ôÄÔ∏è <b>{appt[2]}</b>\n"
                        f"üìÖ –î–∞—Ç–∞: {appt[3]}\n"
                        f"‚è∞ –í—Ä–µ–º—è: {appt[4]}\n"
                        f"üë§ {appt[5]}\n\n"
                        f"‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>\n"
                        f"‚Ä¢ –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏\n"
                        f"‚Ä¢ –í–æ–∑—å–º–∏—Ç–µ —Å —Å–æ–±–æ–π –¥–æ–∫—É–º–µ–Ω—Ç—ã\n"
                        f"‚Ä¢ –ü—Ä–∏ –∞–ª–ª–µ—Ä–≥–∏—è—Ö –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞\n\n"
                        f"üìû –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
                    )
                    
                    await bot.send_message(
                        appt[1],
                        reminder_text,
                        parse_mode="HTML"
                    )
                    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {appt[1]}")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ –¥–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {appt[1]}: {e}")
            
            # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ —á–∞—Å
            one_hour_later = now + timedelta(hours=1)
            hour_appointments = await db.get_appointments_by_time(one_hour_later.strftime("%H:%M"))
            for appt in hour_appointments:
                try:
                    reminder_text = (
                        f"‚è∞ <b>–°–∫–æ—Ä–æ –≤–∞—à–∞ –∑–∞–ø–∏—Å—å!</b>\n\n"
                        f"üíÜ‚Äç‚ôÄÔ∏è <b>{appt[2]}</b>\n"
                        f"üìÖ {appt[3]} –≤ {appt[4]}\n"
                        f"üë§ {appt[5]}\n\n"
                        f"üöÄ <b>–ì–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –ø—Ä–∏–µ–º—É!</b>\n"
                        f"‚Ä¢ –£ –≤–∞—Å –µ—Å—Ç—å 1 —á–∞—Å –¥–æ –∑–∞–ø–∏—Å–∏\n"
                        f"‚Ä¢ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã\n"
                        f"‚Ä¢ –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –≤—Ä–µ–º–µ–Ω–∏\n\n"
                        f"üéØ –ñ–¥–µ–º –≤–∞—Å!"
                    )
                    
                    await bot.send_message(
                        appt[1],
                        reminder_text,
                        parse_mode="HTML"
                    )
                    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ —á–∞—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {appt[1]}")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ —á–∞—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {appt[1]}: {e}")
                    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ send_reminders: {e}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    scheduler.add_job(send_reminders, "interval", minutes=30)
    scheduler.start()
    logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
