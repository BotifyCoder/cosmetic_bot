from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from services.database import db
import asyncio
import os

async def get_service_keyboard():
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—Å–ª—É–≥–∞–º–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    services = await db.get_all_services()
    buttons = []
    for service in services:
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ü–µ–Ω–∞ –∏ –≤—Ä–µ–º—è
        price_text = f" {service[4]}‚ÇΩ" if service[4] and service[4] > 0 else ""
        duration_text = f" ({service[3]} –º–∏–Ω)" if service[3] else ""
        button_text = f"{service[1]}{price_text}{duration_text}"
        
        buttons.append([InlineKeyboardButton(
            text=button_text,
            callback_data=f"service_{service[1]}"
        )])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

async def send_services_with_photos(bot, chat_id, message_text="üåü –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É—Å–ª—É–≥–∏ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏"""
    services = await db.get_all_services()
    
    if not services:
        await bot.send_message(chat_id, "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É—Å–ª—É–≥–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —É—Å–ª—É–≥—É —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
    first_service = services[0]
    keyboard = await get_service_keyboard()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —É –ø–µ—Ä–≤–æ–π —É—Å–ª—É–≥–∏
    if first_service[5] and os.path.exists(first_service[5]):  # photo_path
        try:
            photo = FSInputFile(first_service[5])
            await bot.send_photo(
                chat_id=chat_id,
                photo=photo,
                caption=message_text,
                reply_markup=keyboard
            )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.send_message(chat_id, message_text, reply_markup=keyboard)
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(chat_id, message_text, reply_markup=keyboard)

def get_date_keyboard(service, dates):
    if not dates:
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÖ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç", callback_data="none")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º", callback_data="back_to_service")]
        ])
    
    buttons = []
    for date in dates:
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã —Å –¥–Ω–µ–º –Ω–µ–¥–µ–ª–∏
        try:
            from datetime import datetime
            date_obj = datetime.strptime(date, '%d.%m.%Y')
            day_name = date_obj.strftime('%A')
            day_names = {
                'Monday': '–ü–Ω', 'Tuesday': '–í—Ç', 'Wednesday': '–°—Ä', 
                'Thursday': '–ß—Ç', 'Friday': '–ü—Ç', 'Saturday': '–°–±', 'Sunday': '–í—Å'
            }
            day_text = day_names.get(day_name, '')
            button_text = f"üìÖ {date} ({day_text})"
        except:
            button_text = f"üìÖ {date}"
        
        buttons.append([InlineKeyboardButton(text=button_text, callback_data=f"date_{date}_{service}")])
    
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º", callback_data="back_to_service")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_time_keyboard(date, service, times):
    if not times:
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚è∞ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏", callback_data="none")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –¥–∞—Ç–∞–º", callback_data=f"back_to_date_{service}")]
        ])
    
    buttons = []
    for time in times:
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        button_text = f"‚è∞ {time}"
        buttons.append([InlineKeyboardButton(text=button_text, callback_data=f"time_{time}_{date}_{service}")])
    
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –¥–∞—Ç–∞–º", callback_data=f"back_to_date_{service}")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_allergies_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ö†Ô∏è –î–∞, –µ—Å—Ç—å –∞–ª–ª–µ—Ä–≥–∏–∏", callback_data="allergy_yes"),
                InlineKeyboardButton(text="‚úÖ –ù–µ—Ç –∞–ª–ª–µ—Ä–≥–∏–π", callback_data="allergy_no")
            ],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –§–ò–û", callback_data="back_to_fio")]
        ]
    )

def get_confirmation_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="confirm_booking")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="cancel_booking")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Ç–µ–ª–µ—Ñ–æ–Ω—É", callback_data="back_to_phone")]
        ]
    )

def get_admin_appointment_keyboard(appointments):
    buttons = []
    for appt in appointments:
        buttons.append([
            InlineKeyboardButton(
                text=f"üë§ {appt[2]} {appt[3]} ({appt[4]})",
                callback_data=f"edit_{appt[0]}"
            ),
            InlineKeyboardButton(text="‚ùå", callback_data=f"delete_{appt[0]}")
        ])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

async def get_admin_services_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∞–º–∏"""
    services = await db.get_all_services_admin()
    buttons = []
    for service in services:
        status = "‚úÖ" if service[5] else "‚ùå"  # is_active
        price_text = f" {service[4]}‚ÇΩ" if service[4] and service[4] > 0 else " (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)"
        duration_text = f" ‚Ä¢ {service[3]} –º–∏–Ω" if service[3] else ""
        button_text = f"{status} {service[1]}{price_text}{duration_text}"
        
        buttons.append([
            InlineKeyboardButton(
                text=button_text,
                callback_data=f"edit_service_{service[0]}"
            ),
            InlineKeyboardButton(text="üóëÔ∏è", callback_data=f"delete_service_{service[0]}")
        ])
    buttons.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —É—Å–ª—É–≥—É", callback_data="add_service")])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_service_edit_keyboard(service_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_name_{service_id}")],
        [InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_desc_{service_id}")],
        [InlineKeyboardButton(text="‚è±Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", callback_data=f"edit_duration_{service_id}")],
        [InlineKeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"edit_price_{service_id}")],
        [InlineKeyboardButton(text="üì∏ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", callback_data=f"edit_photo_{service_id}")],
        [InlineKeyboardButton(text="üîÑ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å/–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"toggle_active_{service_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º", callback_data="back_to_services")]
    ])

def get_admin_main_keyboard():
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏", callback_data="manage_appointments")],
        [InlineKeyboardButton(text="üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏", callback_data="manage_services")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç", callback_data="add_slot")]
    ])


